})
usethis::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usetest::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::use_vignette("vignettes")
library(dragDBI)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
?eval
library(dragDBI)
library(devtools)
install_github(VeronikaPrielozna/dragDBI)
library(devtools)
use_vignette("package_dragDBI", title="Package 'dragDBI'")
git config pull.rebase false
git config pull.rebase = false
git config pull.rebase(true)
git config pull.rebase true
git config pull.rebase true
git config pull.rebase false
git config --global pull.ff true
git
git config --global pull.ff true
devtools:::document()
PotDBI<-function(df, DBI_val, DBI_UD, NAval=F, sim=10000, plot=T){
if (DBI_val=="CE"){
table_package<-DBI_CE$TOTAL[-which(DBI_CE$TOTAL=="NA")]
table_package<-as.integer(table_package)
table_user<-df$TOTAL
}
if (DBI_val=="SA"){
table_package<-DBI_SA$TOTAL
table_user<-df$TOTAL
}
if(DBI_val=="UD"){
table_user<-df$DBI
if (NAval==T){
table_package<-DBI_UD$DBI[-which(DBI_UD$DBI=="NA")]
table_package<-as.integer(table_package)
}
if (NAval==F){
table_package<-DBI_UD$DBI
}
COLnum1<-2
COLnum2<-3
}
if(DBI_val!="UD"){
COLnum1<-5
COLnum2<-6
}
table1<-matrix(nrow = 5, ncol = 2)
table_cal<-matrix(nrow = 4)
decr<-sort(table_package,decreasing=T)
incr<-sort(table_package,decreasing=F)
vec.nase.dbi<-vector()
for (i in 1:(ncol(df)-COLnum1)){
i<-i+COLnum1
j<-nrow(df)-sum(df[,i]==0)
k<-which('0' != df[,i])
sum.dbi<-sum(as.numeric(table_user[k]))
vec1<-replicate(sim, sum(sample(table_package, prob = 1/(2^table_package), j, F)))
nase.dbi<-round(length(vec1[vec1<=sum.dbi])/(length(vec1)),3)
vec.nase.dbi<-c(vec.nase.dbi,nase.dbi)
}
for (i in 1:(ncol(df)-COLnum1)){
i<-i+COLnum1
j<-nrow(df)-sum(df[,i]==0)
k<-which('0' != df[,i])
k<-table_user[k]
sum.DBI<-sum(as.numeric(table_user[k]))
potDBI<-(sum(vec.nase.dbi)/sum(decr[1:length(k)]))
trupotDBI<-((sum(vec.nase.dbi)-sum(incr[1:length(k)]))/(sum(decr[1:length(k)])-sum(incr[1:length(k)])))
Pmax<-sum(decr[1:length(k)])
Pmin<-sum(incr[1:length(k)])
table_cal<-rbind(sum.DBI, potDBI, trupotDBI, Pmax, Pmin)
table1<-cbind(table1,table_cal)
}
table1<-table1[,3:ncol(table1)]
colnames(table1)<-colnames(df[,COLnum2:ncol(df)])
if (plot == T){
par(mfrow=c(1,1), mar=c(4,4,2,1))
minP<-table1[5,]
maxP<-table1[4,]
posgr = barplot(as.matrix(table1[1,]), plot = F)
plot(NULL,ylim = c(min(minP),max(maxP)),xlim = c(1,ncol(table1))
, xlab = "", xaxt = "n", ylab = "Sum of DBI")
points(c(1:ncol(table1)), table1[1,], pch = 16)
axis(1,at=1:ncol(table1),lab=colnames(table1),las=2)
for (i in 1:ncol(table1)){
arrows(i,minP[i],i,maxP[i],angle=90,code=3,length=0.08)
}
table1<-round(table1,4)
}
print("DBI potential a true DBI potential")
table2<-matrix(nrow = 1, ncol = ncol(table1))
table2<-rbind(table1[2,], table1[3], table1[1,], table1[4,])
colnames(table2)<-colnames(table1)
rownames(table2)<-c("DBI potential", "True DBI potential", "Sum of DBI", "Maximum of the sum of DBI")
t(table2)
}
PotDBI(Data, DBI_val = "CE")
library(dragDBI)
rm(PotDBI)
PotDBI(Data, DBI_val = "CE")
library(dragDBI)
UniteData(Data, DBI_val = "CE")
Data_x<-UniteData(Data, DBI_val = "CE")
PotDBI(Data_x, DBI_val = "CE")
CalculateDBI(Data_x, DBI_val = "CE")
PermDBI(Data_x, DBI_val = "CE")
library(dragDBI)
PermDBI(Data_x, DBI_val = "CE")
library(dragDBI)
PermDBI(Data_x, DBI_val = "CE")
table2<-t(table2)
library(dragDBI)
PermDBI(Data_x, DBI_val = "CE")
library(dragDBI)
PermDBI(Data_x, DBI_val = "CE")
library(dragDBI)
PermDBI(Data_x, DBI_val = "CE")
library(dragDBI)
PermDBI(Data_x, DBI_val = "CE")
library(dragDBI)
PermDBI(Data_x, DBI_val = "CE")
PotDBI(Data_x, DBI_val = "CE")
CalculateDBI(Data_x, DBI_val = "CE")
PermDBI(Data_x, DBI_val = "CE")
StandardDBI(Data_x)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
PermDBI(Data_x, DBI_val = "CE")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
library(dragDBI)
StandardDBI(Data_x, type = "mean", data = "DBI")
CalculateDBI(Data_x, DBI_val = "CE")
PermDBI(Data_x, DBI_val = "CE")
PotDBI(Data_x, DBI_val = "CE")
StandardDBI(Data_x, type = "mean", data = "DBI")
PotDBI(Data_x, DBI_val = "CE")
library(dragDBI)
DBI_UD<-LoadDBI()
DBI_UD<-LoadDBI()
library(dragDBI)
# Uploading user-defined DBI checklist. Saved as DBI_UD.
DBI_UD<-LoadDBI(attrib=F)
# Uploading user-defined DBI checklist. Saved as DBI_UD.
DBI_UD<-LoadDBI(attrib=F)
#          Species DBI
#  Aeshna affinis   5
# Aeshna caerulea   9
#   Aeshna cyanea   0
#  Aeshna grandis   1
#   Aeshna juncea   0
#    Aeshna mixta   1
#         ...       .
# Uploading data containing species of Central Europe. Saved as x_CE.
x_CE<-LoadData()
# Uploading data containing species of Central Europe. Saved as x_CE.
x_CE<-LoadData()
LoadData<-function(attrib=T, na2null=T, abundance=T){
cat(paste("Copy data into clipboard"))
cat("\n")
invisible(readline(prompt="Press [enter] to continue"))
tryCatch(silent=T,
expr = {
x<-read.table("clipboard", h=T, as.is=abundance, sep = "\t")
message("Dataset successfully uploaded.")
},
error = function(e){
message("Dataset inaccurately uploaded, Try again.")
print(e)
},
warning = function(w){
message("Warning! Dataset inaccurately uploaded. Try again.")
print(w)
},
finally = {
message("You can continue.")
}
)
if(na2null==T) x[is.na(x)]<-0
attr(x, "Number of species")<-nrow(x)
attr(x, "Number of samples")<-ncol(x)-1
if (attrib==T){
print("Attributes of table")
print(attributes(x))
}
print(x)
x
}
LoadData()
LoadData()
x_CE<-LoadData(attrib = F)
x_CE<-LoadData(attrib = F)
rm(LoadData)
library(dragDBI)
library(dragDBI)
library(dragDBI)
DBI_UD<-LoadDBI(attrib=F)
PotDBI<-function(df, DBI_val, DBI_UD, type="def", NAval=F, sim=10000, plot=T){
if (DBI_val=="CE"){
table_package<-DBI_CE$TOTAL[-which(DBI_CE$TOTAL=="NA")]
table_package<-as.integer(table_package)
table_user<-df$TOTAL
}
if (DBI_val=="SA"){
table_package<-DBI_SA$TOTAL
table_user<-df$TOTAL
}
if(DBI_val=="UD"){
table_user<-df$DBI
if (NAval==T){
table_package<-DBI_UD$DBI[-which(DBI_UD$DBI=="NA")]
table_package<-as.integer(table_package)
}
if (NAval==F){
table_package<-DBI_UD$DBI
}
COLnum1<-2
COLnum2<-3
}
if(DBI_val!="UD"){
COLnum1<-5
COLnum2<-6
}
table1<-matrix(nrow = 5, ncol = 2)
table_cal<-matrix(nrow = 4)
decr<-sort(table_package,decreasing=T)
incr<-sort(table_package,decreasing=F)
vec.nase.dbi<-vector()
for (i in 1:(ncol(df)-COLnum1)){
i<-i+COLnum1
j<-nrow(df)-sum(df[,i]==0)
k<-which('0' != df[,i])
sum.dbi<-sum(as.numeric(table_user[k]))
vec1<-replicate(sim, sum(sample(table_package, prob = 1/(2^table_package), j, F)))
nase.dbi<-round(length(vec1[vec1<=sum.dbi])/(length(vec1)),3)
vec.nase.dbi<-c(vec.nase.dbi,nase.dbi)
}
for (i in 1:(ncol(df)-COLnum1)){
i<-i+COLnum1
j<-nrow(df)-sum(df[,i]==0)
k<-which('0' != df[,i])
k<-table_user[k]
sum.DBI<-sum(as.numeric(table_user[k]))
potDBI<-(sum(vec.nase.dbi)/sum(decr[1:length(k)]))
trupotDBI<-((sum(vec.nase.dbi)-sum(incr[1:length(k)]))/(sum(decr[1:length(k)])-sum(incr[1:length(k)])))
Pmax<-sum(decr[1:length(k)])
Pmin<-sum(incr[1:length(k)])
table_cal<-rbind(sum.DBI, potDBI, trupotDBI, Pmax, Pmin)
table1<-cbind(table1,table_cal)
}
table1<-table1[,3:ncol(table1)]
colnames(table1)<-colnames(df[,COLnum2:ncol(df)])
if (plot == T){
par(mfrow=c(1,1), mar=c(4,4,2,1))
minP<-table1[5,]
maxP<-table1[4,]
posgr = barplot(as.matrix(table1[1,]), plot = F)
plot(NULL,ylim = c(min(minP),max(maxP)),xlim = c(1,ncol(table1))
, xlab = "", xaxt = "n", ylab = "Sum of DBI")
points(c(1:ncol(table1)), table1[1,], pch = 16)
axis(1,at=1:ncol(table1),lab=colnames(table1),las=2)
for (i in 1:ncol(table1)){
arrows(i,minP[i],i,maxP[i],angle=90,code=3,length=0.08)
}
table1<-round(table1,4)
}
table2<-matrix(nrow = 1, ncol = ncol(table1))
table2<-rbind(table1[2,], table1[3], table1[1,], table1[4,])
colnames(table2)<-colnames(table1)
rownames(table2)<-c("DBI potential", "True DBI potential", "Sum of DBI", "Maximum of the sum of DBI")
if (type=="def"){
cat("DBI potential a true DBI potential","\n")
table3<-t(table2)
}
if(type=="tpDBI"){
table3<-table2[2,]
table3<-t(table3)
}
if(type=="pDBI"){
table3<-table2[1,]
table3<-t(table3)
}
table3
}
library(dragDBI)
rm(PotDBI)
Data_x<-UniteData(Data, DBI_val = "CE")
PotDBI(Data_x, DBI_val = "CE", type = "tpDBI")
PotDBI(Data_x, DBI_val = "CE", type = "pDBI")
library(dragDBI)
PotDBI(Data_x, DBI_val = "CE", type = "tpDBI")
PotDBI(Data_x, DBI_val = "CE", type = "pDBI")
library(dragDBI)
PotDBI(Data_x, DBI_val = "CE", type = "pDBI")
PotDBI(Data_x, DBI_val = "CE", type = "tpDBI")
library(dragDBI)
PotDBI(Data_x, DBI_val = "CE", type = "tpDBI")
PotDBI(Data_x, DBI_val = "CE", type = "pDBI")
library(dragDBI)
PotDBI(Data_x, DBI_val = "CE", type = "tpDBI")
library(dragDBI)
PotDBI(Data_x, DBI_val = "CE")
library(dragDBI)
PotDBI(Data_x, DBI_val = "CE")
PotDBI(Data_x, DBI_val = "CE", type = "tpDBI")
Stormwater<-rm(read_excel("data-raw/Data.xlsx"))
Stormwater<-rm(read_excel("data-raw/Stormwater.xlsx"))
usethis::use_data(Data, overwrite = TRUE)
sinew::makeOxygen(Data, add_fields = "source")
usethis::use_data(Stormwater, overwrite = TRUE)
sinew::makeOxygen(Stormwater, add_fields = "source")
Stormwaters<-rm(read_excel("data-raw/Stormwaters.xlsx"))
Stormwaters<-read_excel("data-raw/Stormwaters.xlsx")
## code to prepare `DATASET` dataset goes here
library(readxl)
Stormwaters<-read_excel("data-raw/Stormwaters.xlsx")
Stormwaters<-read_excel("data-raw/Stormwaters.xlsx")
usethis::use_data(Stormwater, overwrite = TRUEs)
sinew::makeOxygen(Stormwater, add_fields = "source")
usethis::use_data(Stormwaters, overwrite = TRUEs)
sinew::makeOxygen(Stormwaters, add_fields = "source")
usethis::use_data(Stormwaters, overwrite = TRUEs)
usethis::use_data(Stormwaters, overwrite = TRUE)
rm(Stormwaters)
library(dragDBI)
library(dragDBI)
Stormwaters
library(dragDBI)
LoadData()
LoadData()
x1<-LoadData()
x1<-LoadData()
x1
library(dragDBI)
x1<-LoadData()
x2<-UniteData(x1, DBI_val = "SA")
x2<-UniteData(x1, DBI_val = "SA")
str(x2)
library(dragDBI)
x2<-UniteData(x1, DBI_val = "SA")
str(x2)
str(x2$Species)
x3<-StandardDBI(x2, type = "mean")
StormDBI<-UniteData(Stormwaters, DBI_val = "CE")
str(StormDBI)
y2<-StandardDBI(StormDBI, type = "mean")
y2
library(dragDBI)
y2<-StandardDBI(StormDBI, type = "mean")
library(dragDBI)
y2<-StandardDBI(StormDBI, type = "mean")
library(dragDBI)
y2<-StandardDBI(StormDBI, type = "mean")
library(dragDBI)
y2<-StandardDBI(StormDBI, type = "mean")
y2<-StandardDBI(StormDBI, type = "mean", data = "SENS")
str(y1)
y2$Mean_of_Sensitivity
y1=StandardDBI(x2,type="mean") # typ výstupu: "data.frame" "list"       "oldClass"   "vector"
is(y1) # pokud chceme, aby s tím uživatel mohl dále zacházet, je potřeba, aby to vyplivlo to co předtím (vektor?)
library(dragDBI)
y1=StandardDBI(x2,type="mean") # typ výstupu: "data.frame" "list"       "oldClass"   "vector"
is(y1) # pokud chceme, aby s tím uživatel mohl dále zacházet, je potřeba, aby to vyplivlo to co předtím (vektor?)
library(dragDBI)
CalculateDBI(x2,DBI_val="CE",sim=10000) # ve funkci máš pořád menší rovno, má být jenom menší
library(dragDBI)
CalculateDBI(x2,DBI_val="CE",sim=10000) # ve funkci máš pořád menší rovno, má být jenom menší
y1=StandardDBI(x2,type="mean") # typ výstupu: "data.frame" "list"       "oldClass"   "vector"
is(y1) # pokud chceme, aby s tím uživatel mohl dále zacházet, je potřeba, aby to vyplivlo to co předtím (vektor?)
str(y1)
library(dragDBI)
x1<-UniteData(Stormwaters, DBI_val = "CE")
str(x1)
y2<-StandardDBI(y1)
y2<-StandardDBI(y1, type="mean")
library(dragDBI)
PotDBI(StormDBI, DBI_val = "CE")
PotDBI(StormDBI, DBI_val = "CE", plot = T)
library(dragDBI)
Stormwaters
detach("package:dragDBI", unload = TRUE)
library(dragDBI)
StormwaterDBI<-UniteData(Stormwaters, DBI_val = "CE")
StandardDBI(StormwaterDBI, type="mean")
StandardDBI(StormwaterDBI, type="mean", plot=T)
StandardDBI(StormwaterDBI, type="mean",data = "SENS" plot=T)
StandardDBI(StormwaterDBI, type="mean",data = "SENS", plot=T)
PotDBI(StormwaterDBI)
PotDBI(StormwaterDBI, DBI_val = "CE")
library(dragDBI)
PotDBI(StormwaterDBI, DBI_val = "CE")
library(dragDBI)
install.packages("devtools")
library("devtools")
install_github("VeronikaPrielozna/dragDBI")
LoadData<-function(){
cat(paste("Copy data into clipboard"))
cat("\n")
invisible(readline(prompt="Press [enter] to continue"))
tryCatch(silent=T,
expr = {
x<-read.table("clipboard", h=T, as.is=T, sep = "\t")
message("Dataset successfully uploaded.")
},
error = function(e){
message("Dataset inaccurately uploaded, Try again.")
print(e)
},
warning = function(w){
message("Warning! Dataset inaccurately uploaded. Try again.")
print(w)
},
finally = {
x[is.na(x)]<-0
cat(paste("Number of species",nrow(x),"\n"))
cat(paste("Number of samples", ncol(x)-1,"\n"))
}
)
print(x)
x
}
library(dragDBI)
DBI_SA
DBI_SA["Acisoma variegatum"]
DBI_SA[,["Acisoma variegatum"]]
DBI_SA[,["Acisoma variegatum"]]
DBI_SA[,"Acisoma variegatum"]
DBI_SA
## code to prepare `DATASET` dataset goes here
library(readxl)
DBI_SA<-read_excel("data-raw/DBI_SA.xlsx")
usethis::use_data(DBI_SA, overwrite = TRUE)
sinew::makeOxygen(DBI_SA, add_fields = "source")
library(dragDBI)
DBI_SA
rm(DBI_SA)
library(dragDBI)
library(dragDBI)
library(dragDBI)
library(roxygen2)
library(dragDBI)
library(dragDBI)
# Show the format of the built-in dataset.
head(Stormwaters)
library(dragDBI)
head(Stormwaters)
library(dragDBI)
library(dragDBI)
LoadDBI<-function(){
print("Copy data into clipboard")
invisible(readline(prompt="Press [enter] to continue"))
tryCatch(silent=T,
expr = {
DBI_UD<-read.table("clipboard", h=T, as.is=T, sep = "\t")
message("Dataset successfully uploaded.")
},
error = function(e){
message("Dataset inaccurately uploaded, Try again.")
print(e)
},
warning = function(w){
message("Warning! Dataset inaccurately uploaded. Try again.")
print(w)
},
finally = {
colnames(DBI_UD)<-c("Species", "DBI")
cat(paste("Number of species:",nrow(DBI_UD),"\n"))
cat(paste("Your data: ","\n"))
}
)
print(DBI_UD)
DBI_UD
}
rm(LoadDBI)
library(dragDBI)
library(dragDBI)
library(dragDBI)
PotDBI
library(dragDBI)
library(dragDBI)
citation("dragDBI")
