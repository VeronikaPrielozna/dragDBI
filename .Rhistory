usethis::use_data_raw()
Data<-read_excel("data-raw/Data.xlsx")
devtools::load_all(".")
library(dragDBI)
devtools::load_all(".")
library(readr)
Data<-read_excel("data-raw/Data.xlsx")
library(readxl)
Data<-read_excel("data-raw/Data.xlsx")
## code to prepare `DATASET` dataset goes here
# library(readxl)
Data<-read_excel("data-raw/Data.xlsx")
usethis::use_data(Data, overwrite = TRUE)
devtools::load_all(".")
library(dragDBI)
sinew::makeOxygen(mydataset, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(mydataset, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
library(sinew)
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
install.packages("sinew")
install.packages("sinew")
sinew::makeOxygen(Data, add_fields = "source")
library(sinew)
sinew::makeOxygen(Data, add_fields = "source")
usethis::use_r("Data")
#' @title DATASET_TITLE
#' @description DATASET_DESCRIPTION
#' @format A data frame with 73 rows and 5 variables:
#' \describe{
#'   \item{\code{Species}}{character COLUMN_DESCRIPTION}
#'   \item{\code{Distribution}}{character COLUMN_DESCRIPTION}
#'   \item{\code{Threat}}{character COLUMN_DESCRIPTION}
#'   \item{\code{Sensitivity}}{character COLUMN_DESCRIPTION}
#'   \item{\code{SUM}}{character COLUMN_DESCRIPTION}
#'}
#' @source \url{http://somewhere.important.com/}
"DBI_val"
usethis::use_r("Data")
sinew::makeOxygen(Data, add_fields = "source")
## code to prepare `DATASET` dataset goes here
# library(readxl)
Data<-read_excel("data-raw/Data.xlsx")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(DATASET, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(mydataset, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(DATASET, add_fields = "source")
sinew::makeOxygen(DATASET.R, add_fields = "source")
sinew::makeOxygen(data, add_fields = "source")
"Data"
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(data, add_fields = "source")
sinew::makeOxygen(data-raw/DATASET, add_fields = "source")
sinew::makeOxygen(data-raw/DATASET.R, add_fields = "source")
sinew::makeOxygen(data-raw/Data.R, add_fields = "source")
sinew::makeOxygen(data-raw/Data, add_fields = "source")
sinew::makeOxygen(data-raw/DATASET, add_fields = "source")
sinew::makeOxygen(DATASET, add_fields = "source")
sinew::makeOxygen(DATASET/Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
## code to prepare `DATASET` dataset goes here
# library(readxl)
Data<-read_excel("data-raw/Data.xlsx")
## code to prepare `DATASET` dataset goes here
library(readxl)
Data<-read_excel("data-raw/Data.xlsx")
sinew::makeOxygen(Data, add_fields = "source")
sinew::makeOxygen(Data, add_fields = "source")
Data<-read_excel("data-raw/Data.xlsx")
sinew::makeOxygen(Data, add_fields = "source")
library(dragDBI)
library(dragDBI)
dragDBI::Data
dragDBI::Data$Species
DBI_CE<-read_excel("data-raw/DBI_CE.xlsx")
usethis::use_data(DBI_CE, overwrite = TRUE)
sinew::makeOxygen(DBI_CE, add_fields = "source")
devtools::load_all(".")
library(dragDBI)
dragDBI::DBI_CE
DBI_SA<-read_excel("data-raw/DBI_SA.xlsx")
## code to prepare `DATASET` dataset goes here
library(readxl)
DBI_SA<-read_excel("data-raw/DBI_SA.xlsx")
usethis::use_data(DBI_SA, overwrite = TRUE)
sinew::makeOxygen(DBI_SA, add_fields = "source")
source("C:/Users/verca/Desktop/dragDBI/data-raw/DATASET.R")
library(dragDBI)
## code to prepare `DATASET` dataset goes here
library(readxl)
DBI_MD<-read_excel("data-raw/DBI_MD.xlsx")
usethis::use_data(DBI_MD, overwrite = TRUE)
sinew::makeOxygen(DBI_MD, add_fields = "source")
library(dragDBI)
library(dragDBI)
library(dragDBI)
library(dragDBI)
library(dragDBI)
source("C:/Users/verca/Desktop/dragDBI/R/DBI_MD.R")
library(dragDBI)
library(dragDBI)
library(dragDBI)
CalculateDBI<-function(df, DBI_val, DBI_MD, nos=10000, plot=T){
hist_names<-as.vector(names(df))
if (DBI_val=="CE"){
table_package<-DBI_CE$TOTAL[-which(is.na(DBI_CE$TOTAL))]
}
if(DBI_val=="SA"){
table_package<-DBI_SA$TOTAL[-which(is.na(DBI_SA$TOTAL))]
}
if(DBI_val=="MD"){
table_package<-DBI_MD
DBI<-df$DBI
}
if(DBI_val!="MD"){
DBI<-df$TOTAL
}
c1<-c(1:3)
c2<-c((length(table_package)-2):length(table_package))
table1<-matrix(nrow = 3, ncol = 2)
table_cal<-matrix(nrow = 3)
for (i in 1:(ncol(df)-5)){
i<-i+5
j<-nrow(df)-sum(df[,i]==0) #kolik hodnot je nenulových
k<-which('0' != df[,i]) # pozice, kde nejsou nuly - druhy vyskytujici se ve spolecenstvu
sum.dbi<-sum(as.numeric(DBI[k]))
mean.dbi<-mean(as.numeric(DBI[k])) # y$Suma[k] jakou Sumu (sensitive+ ...) mají druhy ve vzorku
mean.dbi<-round(mean.dbi,3)
if (j %in% c1 | j %in% c2){
vec1<-apply(combn(table_package,length(k)), 2, sum)
}
else {
vec1<-replicate(nos, sum(sample(table_package, length(k), F)))
}
nase.dbi<-round(length(vec1[vec1<=sum.dbi])/(length(vec1)),3)
table_cal<-rbind(sum.dbi, mean.dbi, nase.dbi)
table1<-cbind(table1,table_cal)
if(plot==T){
hist(vec1, main = paste("Naše DBI pro", hist_names[i]), breaks = 20, xlim = c(0,max(vec1)+8),
cex.main = 1, xlab = " ", ylab = " ")
title(xlab="Tady je ten vec1", line = 2.3, cex = 1)
title(ylab="Frequency", line = 2.3, cex = 1)
abline(v=sum.dbi, lwd=3)
}
}
table1<-table1[,3:ncol(table1)]
colnames(table1)<-colnames(df[,6:ncol(df)])
cat("Calculated DBI values","\n")
print(table1)
}
devtools::load_all(".")
library(dragDBI)
install.packages("C:/Users/verca/Desktop/dragDBI_0.0.0.9000.zip", repos = NULL, type = "win.binary")
detach("package:dragDBI", unload = TRUE)
install.packages("C:/Users/verca/Desktop/dragDBI_0.0.0.9000.zip", repos = NULL, type = "win.binary")
library(dragDBI)
library(dragDBI)
library(dragDBI)
library(dragDBI)
library(dragDBI)
LoadData()
## code to prepare `DATASET` dataset goes here
library(readxl)
Data<-read_excel("data-raw/Data.xlsx")
usethis::use_data(Data, overwrite = TRUE)
sinew::makeOxygen(Data, add_fields = "source")
library(dragDBI)
dragDBI::Data
library(dragDBI)
DBI_SA # ok
DBI_CE # ok
Data # pro? m?sto nul NA hodnoty? V composition data se pr?zdnou bu?kou rozum? nula
## code to prepare `DATASET` dataset goes here
library(readxl)
Data<-read_excel("data-raw/Data.xlsx")
usethis::use_data(Data, overwrite = TRUE)
sinew::makeOxygen(Data, add_fields = "source")
rm(Data)
library(dragDBI)
library(dragDBI)
Data # pro? m?sto nul NA hodnoty? V composition data se pr?zdnou bu?kou rozum? nula
devtools::load_all(".")
devtools::load_all(".")
library(dragDBI)
devtools::load_all(".")
library(dragDBI)
devtools::load_all(".")
DBI_CE<-read_excel("data-raw/DBI_CE.xlsx")
## code to prepare `DATASET` dataset goes here
library(readxl)
DBI_CE<-read_excel("data-raw/DBI_CE.xlsx")
usethis::use_data(DBI_CE, overwrite = TRUE)
sinew::makeOxygen(DBI_CE, add_fields = "source")
devtools::load_all(".")
## code to prepare `DATASET` dataset goes here
library(readxl)
DBI_CE<-read_excel("data-raw/DBI_CE.xlsx")
usethis::use_data(DBI_CE, overwrite = TRUE)
sinew::makeOxygen(DBI_CE, add_fields = "source")
library(dragDBI)
str(DBI_CE)
dragDBI::DBI_CE
dragDBI::DBI_CE
dragDBI::DBI_SA
vec1=rep(0:9,10)
sample(vec1,9,prob=1/(vec1+1),replace=F)
Sys.getenv("GITHUB_PAT")
library(dragDBI)
library(dragDBI)
library(dragDBI)
library(dragDBI)
library(dragDBI)
PotDBI
table_package<-as.integer(table_package)
library(dragDBI)
testthat::DebugReporter
usethis::use_test("LoadData")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usetest::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::use_vignette("vignettes")
library(dragDBI)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
?eval
library(dragDBI)
library(devtools)
install_github(VeronikaPrielozna/dragDBI)
library(devtools)
use_vignette("package_dragDBI", title="Package 'dragDBI'")
git config pull.rebase false
git config pull.rebase = false
git config pull.rebase(true)
git config pull.rebase true
git config pull.rebase true
git config pull.rebase false
git config --global pull.ff true
git
git config --global pull.ff true
devtools:::document()
